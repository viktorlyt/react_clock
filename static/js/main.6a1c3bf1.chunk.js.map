{"version":3,"sources":["Clock.tsx","App.tsx","index.tsx"],"names":["Clock","state","date","Date","timerId","this","window","setInterval","console","log","toLocaleTimeString","setState","prevProps","clockName","props","clearInterval","className","Component","getRandomName","value","Math","random","toString","slice","App","hasClock","nameTimer","document","addEventListener","ReactDOM","render","getElementById"],"mappings":"uLAWaA,EAAb,4MACEC,MAAyB,CACvBC,KAAM,IAAIC,MAFd,EAKEC,QAAU,EALZ,uDAOE,WAAqB,IAAD,OAClBC,KAAKD,QAAUE,OAAOC,aAAY,WAEhCC,QAAQC,IAAI,EAAKR,MAAMC,KAAKQ,sBAE5B,EAAKC,SAAS,CAAET,KAAM,IAAIC,SACzB,OAbP,gCAgBE,SAAmBS,GACbA,EAAUC,YAAcR,KAAKS,MAAMD,WAErCL,QAAQC,IAAR,qCAA0CG,EAAUC,UAApD,eAAoER,KAAKS,MAAMD,cAnBrF,kCAuBE,WACEE,cAAcV,KAAKD,WAxBvB,oBA2BE,WACE,OACE,qBAAKY,UAAU,MAAf,SACE,sBAAKA,UAAU,QAAf,UACE,iCACGX,KAAKS,MAAMD,YAEd,uBACC,YACD,uBACA,mBAAGG,UAAU,QAAb,SACGX,KAAKJ,MAAMC,KAAKQ,gCAtC7B,GAA2BO,aCP3B,SAASC,IACP,IAAMC,EAAQC,KAAKC,SAASC,WAAWC,MAAM,EAAG,GAEhD,MAAM,SAAN,OAAgBJ,GAQX,IAAMK,EAAb,4MACEvB,MAAyB,CACvBY,UAAWK,IACXO,UAAU,GAHd,EAMEC,UAAY,EANd,uDAQE,WAAqB,IAAD,OAClBrB,KAAKqB,UAAYpB,OAAOC,aAAY,WAClC,EAAKI,SAAS,CAAEE,UAAWK,QAC1B,MAEHS,SAASC,iBAAiB,SAAS,WACjC,EAAKjB,SAAS,CAAEc,UAAU,IAE1B,EAAKC,UAAYpB,OAAOC,aAAY,WAClC,EAAKI,SAAS,CAAEE,UAAWK,QAC1B,SAGLS,SAASC,iBAAiB,eAAe,WACvC,EAAKjB,SAAS,CAAEc,UAAU,IAC1BV,cAAc,EAAKW,gBAvBzB,oBA2BE,WACE,OACE,sBAAKV,UAAU,MAAf,UACE,6CACCX,KAAKJ,MAAMwB,UAAY,cAAC,EAAD,CAAOZ,UAAWR,KAAKJ,MAAMY,mBA/B7D,GAAyBI,aCZzBY,IAASC,OACP,cAAC,EAAD,IACAH,SAASI,eAAe,U","file":"static/js/main.6a1c3bf1.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './App.scss';\n\ntype Props = {\n  clockName: string,\n};\n\ntype State = {\n  date: Date,\n};\n\nexport class Clock extends Component<Props, State> {\n  state: Readonly<State> = {\n    date: new Date(),\n  };\n\n  timerId = 0;\n\n  componentDidMount() {\n    this.timerId = window.setInterval(() => {\n      // eslint-disable-next-line no-console\n      console.log(this.state.date.toLocaleTimeString());\n\n      this.setState({ date: new Date() });\n    }, 1000);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.clockName !== this.props.clockName) {\n      // eslint-disable-next-line\n      console.log(`The Clock was renamed from ${prevProps.clockName} to ${this.props.clockName}`);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"clock\">\n          <strong>\n            {this.props.clockName}\n          </strong>\n          <br />\n          {' time is '}\n          <br />\n          <p className=\"tablo\">\n            {this.state.date.toLocaleTimeString()}\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n","import { Component } from 'react';\nimport './App.scss';\nimport { Clock } from './Clock';\n\nfunction getRandomName(): string {\n  const value = Math.random().toString().slice(2, 6);\n\n  return `Clock-${value}`;\n}\n\ntype State = {\n  clockName: string,\n  hasClock: boolean;\n};\n\nexport class App extends Component<{}, State> {\n  state: Readonly<State> = {\n    clockName: getRandomName(),\n    hasClock: true,\n  };\n\n  nameTimer = 0;\n\n  componentDidMount() {\n    this.nameTimer = window.setInterval(() => {\n      this.setState({ clockName: getRandomName() });\n    }, 3300);\n\n    document.addEventListener('click', () => {\n      this.setState({ hasClock: true });\n\n      this.nameTimer = window.setInterval(() => {\n        this.setState({ clockName: getRandomName() });\n      }, 3300);\n    });\n\n    document.addEventListener('contextmenu', () => {\n      this.setState({ hasClock: false });\n      clearInterval(this.nameTimer);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n        {this.state.hasClock && <Clock clockName={this.state.clockName} />}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}